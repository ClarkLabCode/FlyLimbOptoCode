function [ projBitMap, cameraBitMap ] = generateProjectorBitmap( cameraBitMap, tform )
% This function generates a projector bitmap from a desired Camera bitmap
% and corresponding coordinate transformation matrix

% NOTE: tform is a 2-D affine geometric transformation that is generated by 
% estimateGeometricTransform.m. It is a matrix that maps points in the
% cameraBitMap to points in the projBitMap.
% tform.T is a 3-by-3 double-precision, floating point matrix that defines 
% the 2-D forward affine transformation. The matrix T uses the convention:
% [x y 1] = [u v 1] * T
% where T has the form:
%  [a b 0;
%   c d 0;
%   e f 1];

% 604 --> Lightcrafter Projector Height in Pixels
% 684 --> Lightcrafter Projector Width in Pixels
% 912  --> LCR 4500 Projector Height in Pixels
% 1140 --> LCR 4500 Projector Width in Pixels
% 512 --> Camera Height in Pixels
% 640 --> Camera Width in Pixels

% Set defaults
h = 912; % px 
w = 1140; % px

% Initialize a projector bitMap of the appropriate size
projBitMap = zeros(h,w,size(cameraBitMap,3));

% Find all the indices of the non-zero elements in cameraBitMap
logicals = find(cameraBitMap ~= 0);
values = cameraBitMap(logicals);
[camY,camX,camZ] = ind2sub(size(cameraBitMap),logicals);

% Calculate the projector coordinates for each of the non-zero elements in the camera bitmap

% % Built-in Affine Method
% projXY1 = [camX,camY,ones(length(camY),1)] * tform.T; % For built in affine transformation

% Linear regression method with square terms
projXY1 = [camX.^2, camY.^2, camX.*camY, camX, camY, ones(length(camY),1)] * tform;

projX = projXY1(:,1);
projY = projXY1(:,2);
projZ = camZ;
% projYX1 = [camY,camX,ones(length(camY),1)] * tform.T;
% projY = projYX1(:,1);
% projX = projYX1(:,2);
% projZ = camZ;


% Eliminate elements that are outside the bounds of the projector bitmap
% Remove Invalid Row Values
rRemove = find(projY<1 | projY>h);
projY(rRemove)   = [];
projX(rRemove)   = [];
projZ(rRemove)   = [];
values(rRemove) = [];

% Check if activations in the camera frame were removed and modify the camera bitmap
if ~isempty(rRemove) 

    % Display a message saying that the cameraBitMap changed
    fprintf('Certain activations could not be generated with the projector alignment.\nRegenerating cameraBitMap.\n');
    
    % Remove unprojectable regions from the cameraBitMap
    idx = sub2ind(size(cameraBitMap), camY(rRemove), camX(rRemove), camZ(rRemove));
    cameraBitMap(idx) = 0;
    
    % Remove the entries from the list of non-zero positions in cameraBitMap to align indexing
    camY(rRemove) = []; 
    camX(rRemove) = [];
    camZ(rRemove) = [];
end

% Remove Invalid Column Values
cRemove = find(projX<1 | projX>w);
projY(cRemove)   = [];
projX(cRemove)   = [];
projZ(cRemove)   = [];
values(cRemove)  = [];

% Check if activations in the camera frame were removed and modify the camera bitmap
if ~isempty(cRemove) 

    % Display a message saying that the cameraBitMap changed
    fprintf('Certain activations could not be generated with the projector alignment.\nRegenerating cameraBitMap.\n');
    
    % Remove unprojectable regions from the cameraBitMap
    idx = sub2ind(size(cameraBitMap), camY(cRemove), camX(cRemove), camZ(cRemove));
    cameraBitMap(idx) = 0;
    
    % Remove the entries from the list of non-zero positions in cameraBitMap to align indexing
    camY(cRemove) = []; 
    camX(cRemove) = [];
    camZ(cRemove) = [];
end

% Put the non-zero elements from cameraBitMap into the new appropriate locations in projBitMap
% NOTE: The projected coordinate value are not guaranteed to be integers so
% we will need to round to integer pixels
idx = sub2ind(size(projBitMap), round(projY), round(projX), round(projZ));
projBitMap(idx) = values;

% % Example Code for Generating tform from Matlab
% % original  = cameraBitMap(:,:,5)*255;
% original  = imread('cameraman.tif');
% makeFigure;
% imshow(original);
% title('Base image');
% distorted = imresize(original,0.7);
% distorted = imrotate(distorted,31);
% makeFigure; 
% imshow(distorted);
% title('Transformed image');
% 
% % Detect and extract features from the two images
% ptsOriginal  = detectSURFFeatures(original);
% ptsDistorted = detectSURFFeatures(distorted);
% [featuresOriginal, validPtsOriginal]  = extractFeatures(original,ptsOriginal);
% [featuresDistorted,validPtsDistorted] = extractFeatures(distorted,ptsDistorted);
% 
% % Match features from the two images
% index_pairs = matchFeatures(featuresOriginal,featuresDistorted);
% matchedPtsOriginal  = validPtsOriginal(index_pairs(:,1));
% matchedPtsDistorted = validPtsDistorted(index_pairs(:,2));
% makeFigure;
% showMatchedFeatures(original,distorted,matchedPtsOriginal,matchedPtsDistorted);
% title('Matched SURF points,including outliers');
% 
% % Exclude outliers and compute the transformation matrix
% [tform,inlierPtsDistorted,inlierPtsOriginal] = estimateGeometricTransform(matchedPtsDistorted,matchedPtsOriginal,'similarity');
% makeFigure;
% 
% showMatchedFeatures(original,distorted,inlierPtsOriginal,inlierPtsDistorted);
% title('Matched inlier points');

end

